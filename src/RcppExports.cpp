// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// load_10x_fragments_cpp
SEXP load_10x_fragments_cpp(std::string path, std::string comment);
RcppExport SEXP _BPCells_load_10x_fragments_cpp(SEXP pathSEXP, SEXP commentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type comment(commentSEXP);
    rcpp_result_gen = Rcpp::wrap(load_10x_fragments_cpp(path, comment));
    return rcpp_result_gen;
END_RCPP
}
// write_10x_fragments_cpp
void write_10x_fragments_cpp(std::string path, SEXP fragments, bool append_5th_column);
RcppExport SEXP _BPCells_write_10x_fragments_cpp(SEXP pathSEXP, SEXP fragmentsSEXP, SEXP append_5th_columnSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< bool >::type append_5th_column(append_5th_columnSEXP);
    write_10x_fragments_cpp(path, fragments, append_5th_column);
    return R_NilValue;
END_RCPP
}
// iterate_packed_fragments_cpp
SEXP iterate_packed_fragments_cpp(S4 s4);
RcppExport SEXP _BPCells_iterate_packed_fragments_cpp(SEXP s4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s4(s4SEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_fragments_cpp(s4));
    return rcpp_result_gen;
END_RCPP
}
// calculate_end_max_cpp
IntegerVector calculate_end_max_cpp(IntegerVector end, IntegerVector chr_ptr);
RcppExport SEXP _BPCells_calculate_end_max_cpp(SEXP endSEXP, SEXP chr_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type end(endSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr_ptr(chr_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_end_max_cpp(end, chr_ptr));
    return rcpp_result_gen;
END_RCPP
}
// write_packed_fragments_cpp
List write_packed_fragments_cpp(SEXP fragments);
RcppExport SEXP _BPCells_write_packed_fragments_cpp(SEXP fragmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(write_packed_fragments_cpp(fragments));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_fragments_cpp
SEXP iterate_unpacked_fragments_cpp(S4 s4);
RcppExport SEXP _BPCells_iterate_unpacked_fragments_cpp(SEXP s4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type s4(s4SEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_fragments_cpp(s4));
    return rcpp_result_gen;
END_RCPP
}
// write_unpacked_fragments_cpp
List write_unpacked_fragments_cpp(SEXP fragments);
RcppExport SEXP _BPCells_write_unpacked_fragments_cpp(SEXP fragmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(write_unpacked_fragments_cpp(fragments));
    return rcpp_result_gen;
END_RCPP
}
// is_compressed_fragments_file_cpp
bool is_compressed_fragments_file_cpp(std::string dir, uint32_t buffer_size);
RcppExport SEXP _BPCells_is_compressed_fragments_file_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(is_compressed_fragments_file_cpp(dir, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_fragments_file_cpp
SEXP iterate_unpacked_fragments_file_cpp(std::string dir, uint32_t buffer_size);
RcppExport SEXP _BPCells_iterate_unpacked_fragments_file_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_fragments_file_cpp(dir, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// write_unpacked_fragments_file_cpp
void write_unpacked_fragments_file_cpp(SEXP fragments, std::string dir, uint32_t buffer_size);
RcppExport SEXP _BPCells_write_unpacked_fragments_file_cpp(SEXP fragmentsSEXP, SEXP dirSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    write_unpacked_fragments_file_cpp(fragments, dir, buffer_size);
    return R_NilValue;
END_RCPP
}
// iterate_packed_fragments_file_cpp
SEXP iterate_packed_fragments_file_cpp(std::string dir, uint32_t buffer_size);
RcppExport SEXP _BPCells_iterate_packed_fragments_file_cpp(SEXP dirSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_fragments_file_cpp(dir, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// write_packed_fragments_file_cpp
void write_packed_fragments_file_cpp(SEXP fragments, std::string dir, uint32_t buffer_size);
RcppExport SEXP _BPCells_write_packed_fragments_file_cpp(SEXP fragmentsSEXP, SEXP dirSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    write_packed_fragments_file_cpp(fragments, dir, buffer_size);
    return R_NilValue;
END_RCPP
}
// is_compressed_fragments_hdf5_cpp
bool is_compressed_fragments_hdf5_cpp(std::string file, std::string group, uint32_t buffer_size);
RcppExport SEXP _BPCells_is_compressed_fragments_hdf5_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(is_compressed_fragments_hdf5_cpp(file, group, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// iterate_unpacked_fragments_hdf5_cpp
SEXP iterate_unpacked_fragments_hdf5_cpp(std::string file, std::string group, uint32_t buffer_size);
RcppExport SEXP _BPCells_iterate_unpacked_fragments_hdf5_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_unpacked_fragments_hdf5_cpp(file, group, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// write_unpacked_fragments_hdf5_cpp
void write_unpacked_fragments_hdf5_cpp(SEXP fragments, std::string file, std::string group, uint32_t buffer_size, uint32_t chunk_size);
RcppExport SEXP _BPCells_write_unpacked_fragments_hdf5_cpp(SEXP fragmentsSEXP, SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chunk_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type chunk_size(chunk_sizeSEXP);
    write_unpacked_fragments_hdf5_cpp(fragments, file, group, buffer_size, chunk_size);
    return R_NilValue;
END_RCPP
}
// iterate_packed_fragments_hdf5_cpp
SEXP iterate_packed_fragments_hdf5_cpp(std::string file, std::string group, uint32_t buffer_size);
RcppExport SEXP _BPCells_iterate_packed_fragments_hdf5_cpp(SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_packed_fragments_hdf5_cpp(file, group, buffer_size));
    return rcpp_result_gen;
END_RCPP
}
// write_packed_fragments_hdf5_cpp
void write_packed_fragments_hdf5_cpp(SEXP fragments, std::string file, std::string group, uint32_t buffer_size, uint32_t chunk_size);
RcppExport SEXP _BPCells_write_packed_fragments_hdf5_cpp(SEXP fragmentsSEXP, SEXP fileSEXP, SEXP groupSEXP, SEXP buffer_sizeSEXP, SEXP chunk_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type group(groupSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type chunk_size(chunk_sizeSEXP);
    write_packed_fragments_hdf5_cpp(fragments, file, group, buffer_size, chunk_size);
    return R_NilValue;
END_RCPP
}
// get_bp128_version_cpp
int get_bp128_version_cpp();
RcppExport SEXP _BPCells_get_bp128_version_cpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_bp128_version_cpp());
    return rcpp_result_gen;
END_RCPP
}
// fragments_identical_cpp
bool fragments_identical_cpp(SEXP fragments1, SEXP fragments2);
RcppExport SEXP _BPCells_fragments_identical_cpp(SEXP fragments1SEXP, SEXP fragments2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments1(fragments1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type fragments2(fragments2SEXP);
    rcpp_result_gen = Rcpp::wrap(fragments_identical_cpp(fragments1, fragments2));
    return rcpp_result_gen;
END_RCPP
}
// scan_fragments_cpp
NumericVector scan_fragments_cpp(SEXP fragments);
RcppExport SEXP _BPCells_scan_fragments_cpp(SEXP fragmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(scan_fragments_cpp(fragments));
    return rcpp_result_gen;
END_RCPP
}
// nucleosome_counts_cpp
List nucleosome_counts_cpp(SEXP fragments, uint32_t nuc_width);
RcppExport SEXP _BPCells_nucleosome_counts_cpp(SEXP fragmentsSEXP, SEXP nuc_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nuc_width(nuc_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(nucleosome_counts_cpp(fragments, nuc_width));
    return rcpp_result_gen;
END_RCPP
}
// iterate_shift_cpp
SEXP iterate_shift_cpp(SEXP fragments, int32_t shift_start, int32_t shift_end);
RcppExport SEXP _BPCells_iterate_shift_cpp(SEXP fragmentsSEXP, SEXP shift_startSEXP, SEXP shift_endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< int32_t >::type shift_start(shift_startSEXP);
    Rcpp::traits::input_parameter< int32_t >::type shift_end(shift_endSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_shift_cpp(fragments, shift_start, shift_end));
    return rcpp_result_gen;
END_RCPP
}
// iterate_chr_index_select_cpp
SEXP iterate_chr_index_select_cpp(SEXP fragments, std::vector<uint32_t> chr_selection);
RcppExport SEXP _BPCells_iterate_chr_index_select_cpp(SEXP fragmentsSEXP, SEXP chr_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type chr_selection(chr_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_chr_index_select_cpp(fragments, chr_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_chr_name_select_cpp
SEXP iterate_chr_name_select_cpp(SEXP fragments, std::vector<std::string> chr_selection);
RcppExport SEXP _BPCells_iterate_chr_name_select_cpp(SEXP fragmentsSEXP, SEXP chr_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type chr_selection(chr_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_chr_name_select_cpp(fragments, chr_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_cell_index_select_cpp
SEXP iterate_cell_index_select_cpp(SEXP fragments, std::vector<uint32_t> cell_selection);
RcppExport SEXP _BPCells_iterate_cell_index_select_cpp(SEXP fragmentsSEXP, SEXP cell_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type cell_selection(cell_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_cell_index_select_cpp(fragments, cell_selection));
    return rcpp_result_gen;
END_RCPP
}
// iterate_cell_name_select_cpp
SEXP iterate_cell_name_select_cpp(SEXP fragments, std::vector<std::string> cell_selection);
RcppExport SEXP _BPCells_iterate_cell_name_select_cpp(SEXP fragmentsSEXP, SEXP cell_selectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fragments(fragmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type cell_selection(cell_selectionSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_cell_name_select_cpp(fragments, cell_selection));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BPCells_load_10x_fragments_cpp", (DL_FUNC) &_BPCells_load_10x_fragments_cpp, 2},
    {"_BPCells_write_10x_fragments_cpp", (DL_FUNC) &_BPCells_write_10x_fragments_cpp, 3},
    {"_BPCells_iterate_packed_fragments_cpp", (DL_FUNC) &_BPCells_iterate_packed_fragments_cpp, 1},
    {"_BPCells_calculate_end_max_cpp", (DL_FUNC) &_BPCells_calculate_end_max_cpp, 2},
    {"_BPCells_write_packed_fragments_cpp", (DL_FUNC) &_BPCells_write_packed_fragments_cpp, 1},
    {"_BPCells_iterate_unpacked_fragments_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_fragments_cpp, 1},
    {"_BPCells_write_unpacked_fragments_cpp", (DL_FUNC) &_BPCells_write_unpacked_fragments_cpp, 1},
    {"_BPCells_is_compressed_fragments_file_cpp", (DL_FUNC) &_BPCells_is_compressed_fragments_file_cpp, 2},
    {"_BPCells_iterate_unpacked_fragments_file_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_fragments_file_cpp, 2},
    {"_BPCells_write_unpacked_fragments_file_cpp", (DL_FUNC) &_BPCells_write_unpacked_fragments_file_cpp, 3},
    {"_BPCells_iterate_packed_fragments_file_cpp", (DL_FUNC) &_BPCells_iterate_packed_fragments_file_cpp, 2},
    {"_BPCells_write_packed_fragments_file_cpp", (DL_FUNC) &_BPCells_write_packed_fragments_file_cpp, 3},
    {"_BPCells_is_compressed_fragments_hdf5_cpp", (DL_FUNC) &_BPCells_is_compressed_fragments_hdf5_cpp, 3},
    {"_BPCells_iterate_unpacked_fragments_hdf5_cpp", (DL_FUNC) &_BPCells_iterate_unpacked_fragments_hdf5_cpp, 3},
    {"_BPCells_write_unpacked_fragments_hdf5_cpp", (DL_FUNC) &_BPCells_write_unpacked_fragments_hdf5_cpp, 5},
    {"_BPCells_iterate_packed_fragments_hdf5_cpp", (DL_FUNC) &_BPCells_iterate_packed_fragments_hdf5_cpp, 3},
    {"_BPCells_write_packed_fragments_hdf5_cpp", (DL_FUNC) &_BPCells_write_packed_fragments_hdf5_cpp, 5},
    {"_BPCells_get_bp128_version_cpp", (DL_FUNC) &_BPCells_get_bp128_version_cpp, 0},
    {"_BPCells_fragments_identical_cpp", (DL_FUNC) &_BPCells_fragments_identical_cpp, 2},
    {"_BPCells_scan_fragments_cpp", (DL_FUNC) &_BPCells_scan_fragments_cpp, 1},
    {"_BPCells_nucleosome_counts_cpp", (DL_FUNC) &_BPCells_nucleosome_counts_cpp, 2},
    {"_BPCells_iterate_shift_cpp", (DL_FUNC) &_BPCells_iterate_shift_cpp, 3},
    {"_BPCells_iterate_chr_index_select_cpp", (DL_FUNC) &_BPCells_iterate_chr_index_select_cpp, 2},
    {"_BPCells_iterate_chr_name_select_cpp", (DL_FUNC) &_BPCells_iterate_chr_name_select_cpp, 2},
    {"_BPCells_iterate_cell_index_select_cpp", (DL_FUNC) &_BPCells_iterate_cell_index_select_cpp, 2},
    {"_BPCells_iterate_cell_name_select_cpp", (DL_FUNC) &_BPCells_iterate_cell_name_select_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BPCells(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
