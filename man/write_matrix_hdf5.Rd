% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matrix.R
\name{write_matrix_hdf5}
\alias{write_matrix_hdf5}
\title{Write a sparse integer matrix to an hdf5 file}
\usage{
write_matrix_hdf5(
  mat,
  path,
  group,
  compress = TRUE,
  buffer_size = 8192L,
  chunk_size = 1024L
)
}
\arguments{
\item{path}{Path to the hdf5 file on disk}

\item{group}{The group within the hdf5 file to write the data to. If writing
to an existing hdf5 file this group must not already be in use}

\item{compress}{Whether or not to compress the data. With compression, memory usage should
be about half the size of a gzip-compressed 10x fragments file holding the same data.
Without compression memory usage can be 10-20\% larger.}

\item{buffer_size}{For performance tuning only. The number of items to be bufferred
in memory before calling writes to disk.}

\item{chunk_size}{For performance tuning only. The chunk size used for the HDF5 array storage.}
}
\value{
MatrixH5 object
}
\description{
Write a sparse integer matrix to an hdf5 file
}
\details{
This function will convert row major storage orders to column major,
which will usually require 2 extra passes over the data.

For typical RNA counts matrices, which are unsigned integer matrices
(type uint32_t), this function will result in 6-8x less space than an R dgCMatrix,
and 4-6x smaller than a scipy csc_matrix. The compression will be more effective when
the count values in the matrix are small, and when the rows of the matrix are
sorted by rowMeans. In tests on RNA-seq data optimal ordering could save up to
40\% of storage space. On non-integer data only the row indices are compressed,
not the values themselves so space savings will be smaller.

Note: this function will not perform automatic conversions to non-negative
integer matrices, so use the function \code{convert_matrix_type_uint32_t} first if high-efficiency
compression is desired.
}
