% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matrix.R
\name{tileMatrix}
\alias{tileMatrix}
\title{Calculate ranges x cells tile overlap matrix}
\usage{
tileMatrix(
  fragments,
  ranges,
  zero_based_coords = TRUE,
  explicit_tile_names = FALSE
)
}
\arguments{
\item{fragments}{Input fragments object}

\item{ranges}{GRanges object with the ranges to overlap including a metadata column tile_width,
or a list/data frame with columns chr, start, end, and tile_width. Must be non-overlapping and sorted by
(chr, start), with chromosomes ordered according to the chromosome names of \code{fragments}}

\item{zero_based_coords}{Boolean for whether the input ranges are in a 0-based
or a 1-based coordinate system. (1-based will be converted to 0-based)
(see http://genome.ucsc.edu/blog/the-ucsc-genome-browser-coordinate-counting-systems/)}

\item{explicit_tile_names}{Boolean for whether to add rownames to the output matrix in format e.g
chr1:500-1000, where start and end coords are given in a 0-based coordinate system. For
whole-genome Tile matrices the names will take ~5 seconds to generate and take up 400MB of memory.
Note that either way, tile names will be written when the matrix is saved.}
}
\value{
Iterable matrix object with dimension ranges x cells. When saved,
the column names will be in the format chr1:500-1000,
where start and end coords are given in a 0-based coordinate system.
}
\description{
Calculate ranges x cells tile overlap matrix
}
\note{
When calculating the matrix directly from a fragments tsv, it's necessary to first call \code{select_chromosomes} in order to
provide the ordering of chromosomes to expect while reading the tsv.
}
